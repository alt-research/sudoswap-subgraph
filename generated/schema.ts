// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get collection(): string | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collection(value: string | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromString(<string>value));
    }
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }
}

export class Attribute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Attribute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Attribute must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Attribute", id.toString(), this);
    }
  }

  static load(id: string): Attribute | null {
    return changetype<Attribute | null>(store.get("Attribute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trait_type(): string {
    let value = this.get("trait_type");
    return value!.toString();
  }

  set trait_type(value: string) {
    this.set("trait_type", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairCount(): BigInt {
    let value = this.get("pairCount");
    return value!.toBigInt();
  }

  set pairCount(value: BigInt) {
    this.set("pairCount", Value.fromBigInt(value));
  }

  get pairs(): Array<string> {
    let value = this.get("pairs");
    return value!.toStringArray();
  }

  set pairs(value: Array<string>) {
    this.set("pairs", Value.fromStringArray(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }
}

export class NewPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewPair", id.toString(), this);
    }
  }

  static load(id: string): NewPair | null {
    return changetype<NewPair | null>(store.get("NewPair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(<string>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdTx(): string | null {
    let value = this.get("createdTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTx(value: string | null) {
    if (!value) {
      this.unset("createdTx");
    } else {
      this.set("createdTx", Value.fromString(<string>value));
    }
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get initialBondingCurveAddress(): string | null {
    let value = this.get("initialBondingCurveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialBondingCurveAddress(value: string | null) {
    if (!value) {
      this.unset("initialBondingCurveAddress");
    } else {
      this.set("initialBondingCurveAddress", Value.fromString(<string>value));
    }
  }

  get initialAssetRecipient(): string | null {
    let value = this.get("initialAssetRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialAssetRecipient(value: string | null) {
    if (!value) {
      this.unset("initialAssetRecipient");
    } else {
      this.set("initialAssetRecipient", Value.fromString(<string>value));
    }
  }

  get poolType(): BigInt | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolType(value: BigInt | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialDelta(): BigInt | null {
    let value = this.get("initialDelta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialDelta(value: BigInt | null) {
    if (!value) {
      this.unset("initialDelta");
    } else {
      this.set("initialDelta", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialFeeMultiplier(): BigDecimal | null {
    let value = this.get("initialFeeMultiplier");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set initialFeeMultiplier(value: BigDecimal | null) {
    if (!value) {
      this.unset("initialFeeMultiplier");
    } else {
      this.set("initialFeeMultiplier", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get initialSpotPrice(): BigInt {
    let value = this.get("initialSpotPrice");
    return value!.toBigInt();
  }

  set initialSpotPrice(value: BigInt) {
    this.set("initialSpotPrice", Value.fromBigInt(value));
  }

  get initialNFTIdInventory(): Array<BigInt> | null {
    let value = this.get("initialNFTIdInventory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set initialNFTIdInventory(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("initialNFTIdInventory");
    } else {
      this.set(
        "initialNFTIdInventory",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get initialInventoryCount(): BigInt | null {
    let value = this.get("initialInventoryCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialInventoryCount(value: BigInt | null) {
    if (!value) {
      this.unset("initialInventoryCount");
    } else {
      this.set("initialInventoryCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialETHLiquidity(): BigInt | null {
    let value = this.get("initialETHLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialETHLiquidity(value: BigInt | null) {
    if (!value) {
      this.unset("initialETHLiquidity");
    } else {
      this.set("initialETHLiquidity", Value.fromBigInt(<BigInt>value));
    }
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get createdTx(): string | null {
    let value = this.get("createdTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTx(value: string | null) {
    if (!value) {
      this.unset("createdTx");
    } else {
      this.set("createdTx", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get bondingCurveAddress(): string | null {
    let value = this.get("bondingCurveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bondingCurveAddress(value: string | null) {
    if (!value) {
      this.unset("bondingCurveAddress");
    } else {
      this.set("bondingCurveAddress", Value.fromString(<string>value));
    }
  }

  get assetRecipient(): string | null {
    let value = this.get("assetRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set assetRecipient(value: string | null) {
    if (!value) {
      this.unset("assetRecipient");
    } else {
      this.set("assetRecipient", Value.fromString(<string>value));
    }
  }

  get poolType(): BigInt | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolType(value: BigInt | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromBigInt(<BigInt>value));
    }
  }

  get delta(): BigInt | null {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delta(value: BigInt | null) {
    if (!value) {
      this.unset("delta");
    } else {
      this.set("delta", Value.fromBigInt(<BigInt>value));
    }
  }

  get feeMultiplier(): BigDecimal | null {
    let value = this.get("feeMultiplier");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeMultiplier(value: BigDecimal | null) {
    if (!value) {
      this.unset("feeMultiplier");
    } else {
      this.set("feeMultiplier", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get spotPrice(): BigInt | null {
    let value = this.get("spotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set spotPrice(value: BigInt | null) {
    if (!value) {
      this.unset("spotPrice");
    } else {
      this.set("spotPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftIdInventory(): Array<BigInt> | null {
    let value = this.get("nftIdInventory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIdInventory(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("nftIdInventory");
    } else {
      this.set("nftIdInventory", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get inventoryCount(): BigInt | null {
    let value = this.get("inventoryCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inventoryCount(value: BigInt | null) {
    if (!value) {
      this.unset("inventoryCount");
    } else {
      this.set("inventoryCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethLiquidity(): BigInt | null {
    let value = this.get("ethLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethLiquidity(value: BigInt | null) {
    if (!value) {
      this.unset("ethLiquidity");
    } else {
      this.set("ethLiquidity", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialAttributes(): string | null {
    let value = this.get("initialAttributes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialAttributes(value: string | null) {
    if (!value) {
      this.unset("initialAttributes");
    } else {
      this.set("initialAttributes", Value.fromString(<string>value));
    }
  }
}

export class DailyETHPoolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyETHPoolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyETHPoolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyETHPoolStat", id.toString(), this);
    }
  }

  static load(id: string): DailyETHPoolStat | null {
    return changetype<DailyETHPoolStat | null>(
      store.get("DailyETHPoolStat", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get erc20Contract(): string | null {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string | null) {
    if (!value) {
      this.unset("erc20Contract");
    } else {
      this.set("erc20Contract", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolumeETH(): BigInt | null {
    let value = this.get("swapVolumeETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolumeETH(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolumeETH");
    } else {
      this.set("swapVolumeETH", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolFees(): BigInt | null {
    let value = this.get("approxPoolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolFees");
    } else {
      this.set("approxPoolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolRevenue(): BigInt | null {
    let value = this.get("approxPoolRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolRevenue");
    } else {
      this.set("approxPoolRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolSpent(): BigInt | null {
    let value = this.get("approxPoolSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolSpent");
    } else {
      this.set("approxPoolSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethDeposited(): BigInt | null {
    let value = this.get("ethDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("ethDeposited");
    } else {
      this.set("ethDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethWithdrawn(): BigInt | null {
    let value = this.get("ethWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("ethWithdrawn");
    } else {
      this.set("ethWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numUserBuys(): BigInt | null {
    let value = this.get("numUserBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numUserBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numUserBuys");
    } else {
      this.set("numUserBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numUserSells(): BigInt | null {
    let value = this.get("numUserSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numUserSells(value: BigInt | null) {
    if (!value) {
      this.unset("numUserSells");
    } else {
      this.set("numUserSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyETHPairStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyETHPairStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyETHPairStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyETHPairStat", id.toString(), this);
    }
  }

  static load(id: string): DailyETHPairStat | null {
    return changetype<DailyETHPairStat | null>(
      store.get("DailyETHPairStat", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get erc20Contract(): string | null {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string | null) {
    if (!value) {
      this.unset("erc20Contract");
    } else {
      this.set("erc20Contract", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolumeETH(): BigInt | null {
    let value = this.get("swapVolumeETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolumeETH(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolumeETH");
    } else {
      this.set("swapVolumeETH", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairFees(): BigInt | null {
    let value = this.get("approxPairFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairFees");
    } else {
      this.set("approxPairFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairRevenue(): BigInt | null {
    let value = this.get("approxPairRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairRevenue");
    } else {
      this.set("approxPairRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairSpent(): BigInt | null {
    let value = this.get("approxPairSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairSpent");
    } else {
      this.set("approxPairSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethDeposited(): BigInt | null {
    let value = this.get("ethDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("ethDeposited");
    } else {
      this.set("ethDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethWithdrawn(): BigInt | null {
    let value = this.get("ethWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("ethWithdrawn");
    } else {
      this.set("ethWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get minSpotAsk(): BigInt | null {
    let value = this.get("minSpotAsk");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minSpotAsk(value: BigInt | null) {
    if (!value) {
      this.unset("minSpotAsk");
    } else {
      this.set("minSpotAsk", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxSpotBid(): BigInt | null {
    let value = this.get("maxSpotBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxSpotBid(value: BigInt | null) {
    if (!value) {
      this.unset("maxSpotBid");
    } else {
      this.set("maxSpotBid", Value.fromBigInt(<BigInt>value));
    }
  }

  get numUserBuys(): BigInt | null {
    let value = this.get("numUserBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numUserBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numUserBuys");
    } else {
      this.set("numUserBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numUserSells(): BigInt | null {
    let value = this.get("numUserSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numUserSells(value: BigInt | null) {
    if (!value) {
      this.unset("numUserSells");
    } else {
      this.set("numUserSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyETHProtocolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyETHProtocolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyETHProtocolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyETHProtocolStat", id.toString(), this);
    }
  }

  static load(id: string): DailyETHProtocolStat | null {
    return changetype<DailyETHProtocolStat | null>(
      store.get("DailyETHProtocolStat", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolumeETH(): BigInt | null {
    let value = this.get("swapVolumeETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolumeETH(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolumeETH");
    } else {
      this.set("swapVolumeETH", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolFees(): BigInt | null {
    let value = this.get("approxPoolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolFees");
    } else {
      this.set("approxPoolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolRevenue(): BigInt | null {
    let value = this.get("approxPoolRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolRevenue");
    } else {
      this.set("approxPoolRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolSpent(): BigInt | null {
    let value = this.get("approxPoolSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolSpent");
    } else {
      this.set("approxPoolSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethDeposited(): BigInt | null {
    let value = this.get("ethDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("ethDeposited");
    } else {
      this.set("ethDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethWithdrawn(): BigInt | null {
    let value = this.get("ethWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("ethWithdrawn");
    } else {
      this.set("ethWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numPoolsCreated(): BigInt | null {
    let value = this.get("numPoolsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numPoolsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("numPoolsCreated");
    } else {
      this.set("numPoolsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get numPairsCreated(): BigInt | null {
    let value = this.get("numPairsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numPairsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("numPairsCreated");
    } else {
      this.set("numPairsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numUserBuys(): BigInt | null {
    let value = this.get("numUserBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numUserBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numUserBuys");
    } else {
      this.set("numUserBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numUserSells(): BigInt | null {
    let value = this.get("numUserSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numUserSells(value: BigInt | null) {
    if (!value) {
      this.unset("numUserSells");
    } else {
      this.set("numUserSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class BondingCurveStatusUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BondingCurveStatusUpdate entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondingCurveStatusUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BondingCurveStatusUpdate", id.toString(), this);
    }
  }

  static load(id: string): BondingCurveStatusUpdate | null {
    return changetype<BondingCurveStatusUpdate | null>(
      store.get("BondingCurveStatusUpdate", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get allowed(): string | null {
    let value = this.get("allowed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set allowed(value: string | null) {
    if (!value) {
      this.unset("allowed");
    } else {
      this.set("allowed", Value.fromString(<string>value));
    }
  }

  get address(): string | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(<string>value));
    }
  }
}

export class AssetRecipientChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssetRecipientChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AssetRecipientChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AssetRecipientChange", id.toString(), this);
    }
  }

  static load(id: string): AssetRecipientChange | null {
    return changetype<AssetRecipientChange | null>(
      store.get("AssetRecipientChange", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get a(): Bytes {
    let value = this.get("a");
    return value!.toBytes();
  }

  set a(value: Bytes) {
    this.set("a", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DeltaUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DeltaUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DeltaUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DeltaUpdate", id.toString(), this);
    }
  }

  static load(id: string): DeltaUpdate | null {
    return changetype<DeltaUpdate | null>(store.get("DeltaUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newDelta(): BigInt {
    let value = this.get("newDelta");
    return value!.toBigInt();
  }

  set newDelta(value: BigInt) {
    this.set("newDelta", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class FeeUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeUpdate", id.toString(), this);
    }
  }

  static load(id: string): FeeUpdate | null {
    return changetype<FeeUpdate | null>(store.get("FeeUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newFee(): BigInt {
    let value = this.get("newFee");
    return value!.toBigInt();
  }

  set newFee(value: BigInt) {
    this.set("newFee", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NFTWithdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTWithdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTWithdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTWithdrawal", id.toString(), this);
    }
  }

  static load(id: string): NFTWithdrawal | null {
    return changetype<NFTWithdrawal | null>(store.get("NFTWithdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NFTDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTDeposit", id.toString(), this);
    }
  }

  static load(id: string): NFTDeposit | null {
    return changetype<NFTDeposit | null>(store.get("NFTDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OwnershipTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SpotPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SpotPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SpotPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SpotPrice", id.toString(), this);
    }
  }

  static load(id: string): SpotPrice | null {
    return changetype<SpotPrice | null>(store.get("SpotPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newSpotPrice(): BigInt {
    let value = this.get("newSpotPrice");
    return value!.toBigInt();
  }

  set newSpotPrice(value: BigInt) {
    this.set("newSpotPrice", Value.fromBigInt(value));
  }

  get updateTx(): string | null {
    let value = this.get("updateTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set updateTx(value: string | null) {
    if (!value) {
      this.unset("updateTx");
    } else {
      this.set("updateTx", Value.fromString(<string>value));
    }
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ProtocolFeeMultiplier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProtocolFeeMultiplier entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProtocolFeeMultiplier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProtocolFeeMultiplier", id.toString(), this);
    }
  }

  static load(id: string): ProtocolFeeMultiplier | null {
    return changetype<ProtocolFeeMultiplier | null>(
      store.get("ProtocolFeeMultiplier", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocolFeeMultiplier(): BigDecimal {
    let value = this.get("protocolFeeMultiplier");
    return value!.toBigDecimal();
  }

  set protocolFeeMultiplier(value: BigDecimal) {
    this.set("protocolFeeMultiplier", Value.fromBigDecimal(value));
  }
}

export class PoolNFTBuy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolNFTBuy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolNFTBuy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolNFTBuy", id.toString(), this);
    }
  }

  static load(id: string): PoolNFTBuy | null {
    return changetype<PoolNFTBuy | null>(store.get("PoolNFTBuy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethPaidByPool(): BigInt {
    let value = this.get("ethPaidByPool");
    return value!.toBigInt();
  }

  set ethPaidByPool(value: BigInt) {
    this.set("ethPaidByPool", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value!.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    return value!.toBigInt();
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }
}

export class PoolNFTSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolNFTSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolNFTSale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolNFTSale", id.toString(), this);
    }
  }

  static load(id: string): PoolNFTSale | null {
    return changetype<PoolNFTSale | null>(store.get("PoolNFTSale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethReceivedByPool(): BigInt {
    let value = this.get("ethReceivedByPool");
    return value!.toBigInt();
  }

  set ethReceivedByPool(value: BigInt) {
    this.set("ethReceivedByPool", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value!.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    return value!.toBigInt();
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }
}

export class TokenDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenDeposit", id.toString(), this);
    }
  }

  static load(id: string): TokenDeposit | null {
    return changetype<TokenDeposit | null>(store.get("TokenDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountDeposited(): BigInt {
    let value = this.get("amountDeposited");
    return value!.toBigInt();
  }

  set amountDeposited(value: BigInt) {
    this.set("amountDeposited", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class TokenWithdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenWithdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenWithdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenWithdrawal", id.toString(), this);
    }
  }

  static load(id: string): TokenWithdrawal | null {
    return changetype<TokenWithdrawal | null>(store.get("TokenWithdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountWithdrawn(): BigInt {
    let value = this.get("amountWithdrawn");
    return value!.toBigInt();
  }

  set amountWithdrawn(value: BigInt) {
    this.set("amountWithdrawn", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}
